snippet php
	<?php
	${1}
	?>
snippet ec
	echo "${1:string}"${2};
snippet inc
	include '${1:file}';${2}
snippet inc1
	include_once '${1:file}';${2}
snippet req
	require '${1:file}';${2}
snippet req1
	require_once '${1:file}';${2}
# $GLOBALS['...']
snippet globals
	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
snippet $_ COOKIE['...']
	$_COOKIE['${1:variable}']${2}
snippet $_ ENV['...']
	$_ENV['${1:variable}']${2}
snippet $_ FILES['...']
	$_FILES['${1:variable}']${2}
snippet $_ Get['...']
	$_GET['${1:variable}']${2}
snippet $_ POST['...']
	$_POST['${1:variable}']${2}
snippet $_ REQUEST['...']
	$_REQUEST['${1:variable}']${2}
snippet $_ SERVER['...']
	$_SERVER['${1:variable}']${2}
snippet $_ SESSION['...']
	$_SESSION['${1:variable}']${2}
# Start Docblock
snippet /*
	/**
	 * ${1}
	 **/
# Class - post doc
snippet doc_cp
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @author ${3:`g:snips_author`}
	**/${4}
# Class Variable - post doc
snippet doc_vp
	/**
	 * ${1:undocumented class variable}
	 *
	 * @var ${2:string}
	 **/${3}
# Class Variable
snippet doc_v
	/**
	 * ${3:undocumented class variable}
	 *
	 * @var ${4:string}
	 **/
	${1:var} $${2};${5}
# Class
snippet doc_c
	/**
	 * ${3:undocumented class}
	 *
	 * @packaged ${4:default}
	 * @author ${5:`g:snips_author`}
	 **/
	${1:}class ${2:}
	{${6}
	} // END $1class $2
# Constant Definition - post doc
snippet doc_dp
	/**
	 * ${1:undocumented constant}
	 **/${2}
# Constant Definition
snippet doc_d
	/**
	 * ${3:undocumented constant}
	 **/
	define(${1}, ${2});${4}
# Function - post doc
snippet doc_fp
	/**
	 * ${1:undocumented function}
	 *
	 * @return ${2:void}
	 * @author ${3:`g:snips_author`}
	 **/${4}
# Function signature
snippet doc_s
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 **/
	${1}function ${2}(${3});${7}
# Function
snippet doc_f
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 **/
	${1}function ${2}(${3})
	{${7}
	}
# Header
snippet doc_h
	/**
	 * ${1}
	 *
	 * @author ${2:`g:snips_author`}
	 * @version ${3:$Id$}
	 * @copyright ${4:$2}, `strftime('%d %B, %Y')`
	 * @package ${5:default}
	 **/
	
	/**
	 * Define DocBlock
	 *//
# Interface
snippet doc_i
	/**
	 * ${2:undocumented class}
	 *
	 * @package ${3:default}
	 * @author ${4:`g:snips_author`}
	 **/
	interface ${1:}
	{${5}
	} // END interface $1
# PHPDoc return
snippet pdr
	@return ${1}${2: }
# class ...
snippet class
	/**
	 * ${2}
	 **/
	class ${1:ClassName} {
		${3}
	}
# define(...)
snippet def
	define('${1}'${2});${3}
# defined(...)
snippet def?
	${1}defined('${2}')${3}
snippet wh
	while (${1:/* condition */}) {
		${2:}
	}
# do ... while
snippet do
	do {
		${2: }
	} while (${1:/* condition */});
snippet if
	if (${1:/* condition */}) {
		${2:}
	}
snippet ife
	if (${1:/* condition */}) {
		${2:}
	} else {
		${3:}
	}
	${4}
snippet else
	else {
		${1:}
	}
snippet elseif
	elseif (${1:/* condition */}) {
		${2:}
	}
# Tertiary conditional
snippet t
	$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
snippet switch
	switch ($${1:variable}) {
		case '${2:value}':
			${3:}
			break;
		${5}
		default:
			${4:}
			break;
	}
snippet case
	case '${1:value}':
		${2:}
		break;${3}
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4: }
	}
snippet fore
	foreach (${1:variable} as ${2:key}) {
		${3:}
	}
snippet fun
	/**
	 * ${4: comments}
	 */
	${1:public }function ${2:FunctionName}(${3}) {
		${5:}
	}
# $... = array (...)
snippet array
	$${1:arrayName} = array('${2}' => ${3});${4}
snippet ptc_php
	<?php
	/**
	 * @copyright Copyright (c) 2010, Protec Innovations Ltd
	 * @package ${1:package}
	 * @package ${2:subpackage}
	 */
	${3:}
snippet ptc_dbg
	Protec_Log::logDebug(${1:message});

snippet tcls
	<?php
	/**
	* @copyright Copyright (c) 2010, Protec Innovations Ltd
	* @package ${1:Package}
	* @subpackage Test
	*/

	class ${2:ClassName}_Test extends PHPUnit_Framework_TestCase {
		/**
		*
		* @var $2
		*/
		private $_subject;

		public function setUp() {
			$this->_subject = new $2();
		}

		public function tearDown() {
			$this->subject = null;
		}

		${3:}
	}

snippet tadder
	public function testAdd${1:property}() {
		$numFieldData = 5;
		$added = array();
		for($i = 0; $i < $numFieldData; $i++)   {
			$newModel = $this->getMock('${2:modelToAdd}');
			$this->_subject->add$1($newModel);
			$added[] = $newModel;
		}
		$allNewModels = $this->_subject->get$1${3:s}();
		foreach($allNewModels as $aNewModel) {
			$this->assertContains($aNewModel, $added);
		}
	}

	public function testGet$1$3() {
		//the add$1 test is sufficient
		$this->testAdd$1();
	}
	${4:}
